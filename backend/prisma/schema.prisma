// Database schema for Rann Gaming Backend TypeScript Implementation
// Run: npx prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Session Management
model UserSession {
  id           String   @id @default(uuid())
  address      String   @unique
  sessionData  String   // JSON string containing session information
  lastActive   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("user_sessions")
}

// Yodha NFT Management
model YodhaNFT {
  id           String   @id @default(uuid())
  tokenId      String   @unique
  owner        String
  traits       String   // JSON string containing all trait data
  metadataUri  String?
  isTraining   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("yodha_nfts")
}

// Training Sessions
model TrainingSession {
  id                String   @id
  tokenId           String
  type              String   // stat_training, skill_training, etc.
  status            String   // pending, active, paused, completed, cancelled
  progress          Float    @default(0)
  startedAt         DateTime
  completedAt       DateTime?
  estimatedDuration Int      // Duration in milliseconds
  rewards           String   @default("{}")  // JSON string
  metadata          String   @default("{}")  // JSON string
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("training_sessions")
}

// Battle Results
model BattleResult {
  id               String   @id
  attackerTokenId  String
  defenderTokenId  String
  winner           String
  damageDealt      String   // JSON string
  experienceGained String   // JSON string
  rewardsEarned    String   @default("{}")  // JSON string
  battleType       String
  duration         Int      // Duration in milliseconds
  metadata         String   @default("{}")  // JSON string
  createdAt        DateTime
  updatedAt        DateTime @updatedAt

  @@map("battle_results")
}

// Metadata Storage (for IPFS uploads and general metadata)
model Metadata {
  id       String   @id @default(uuid())
  type     String   // yodha, battle, training, ipfs_upload, json_metadata
  entityId String   // tokenId, battleId, sessionId, or IPFS hash
  data     String   // JSON string containing metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, entityId])
  @@map("metadata")
}

// System Configuration and Settings
model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String   // JSON string for complex values
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

// API Usage Analytics
model APIUsage {
  id           String   @id @default(uuid())
  endpoint     String
  method       String
  userAddress  String?
  statusCode   Int
  responseTime Int      // in milliseconds
  requestSize  Int?     // in bytes
  responseSize Int?     // in bytes
  userAgent    String?
  ipAddress    String?
  timestamp    DateTime @default(now())

  @@map("api_usage")
}

// Error Logs
model ErrorLog {
  id          String   @id @default(uuid())
  level       String   // error, warn, info
  message     String
  stack       String?
  context     String?  // JSON string with additional context
  userAddress String?
  endpoint    String?
  timestamp   DateTime @default(now())

  @@map("error_logs")
}
